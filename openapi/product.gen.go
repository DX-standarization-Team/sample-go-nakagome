// Package product provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package product

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Product defines model for Product.
type Product struct {
	// CreateOn The date that the product was created.
	CreateOn *openapi_types.Date `json:"createOn,omitempty"`

	// DeletedOn The date that the product was deleted.
	DeletedOn   *openapi_types.Date `json:"deletedOn,omitempty"`
	Description string              `json:"description"`

	// Id Unique identifier for the given product.
	Id    int     `json:"id"`
	Name  string  `json:"name"`
	Price float32 `json:"price"`
	Sku   string  `json:"sku"`

	// UpdatedOn The date that the product was updated.
	UpdatedOn *openapi_types.Date `json:"updatedOn,omitempty"`
}

// PostProductJSONBody defines parameters for PostProduct.
type PostProductJSONBody struct {
	CreatedOn   *openapi_types.Date `json:"createdOn,omitempty"`
	DeletedOn   *openapi_types.Date `json:"deletedOn,omitempty"`
	Description *string             `json:"description,omitempty"`
	Name        *string             `json:"name,omitempty"`
	Price       *int                `json:"price,omitempty"`
	Sku         *string             `json:"sku,omitempty"`
	UpdatedOn   *openapi_types.Date `json:"updatedOn,omitempty"`
}

// PatchProductsProductIdJSONBody defines parameters for PatchProductsProductId.
type PatchProductsProductIdJSONBody struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`

	// Price Without tax
	Price *int32  `json:"price,omitempty"`
	Sku   *string `json:"sku,omitempty"`
}

// GetProductsJSONBody defines parameters for GetProducts.
type GetProductsJSONBody = map[string]interface{}

// PostProductJSONRequestBody defines body for PostProduct for application/json ContentType.
type PostProductJSONRequestBody PostProductJSONBody

// PatchProductsProductIdJSONRequestBody defines body for PatchProductsProductId for application/json ContentType.
type PatchProductsProductIdJSONRequestBody PatchProductsProductIdJSONBody

// GetProductsJSONRequestBody defines body for GetProducts for application/json ContentType.
type GetProductsJSONRequestBody = GetProductsJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostProductWithBody request with any body
	PostProductWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProduct(ctx context.Context, body PostProductJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProduct request
	GetProduct(ctx context.Context, productId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchProductsProductIdWithBody request with any body
	PatchProductsProductIdWithBody(ctx context.Context, productId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchProductsProductId(ctx context.Context, productId string, body PatchProductsProductIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProductsWithBody request with any body
	GetProductsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetProducts(ctx context.Context, body GetProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostProductWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProductRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProduct(ctx context.Context, body PostProductJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProductRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProduct(ctx context.Context, productId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductRequest(c.Server, productId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchProductsProductIdWithBody(ctx context.Context, productId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchProductsProductIdRequestWithBody(c.Server, productId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchProductsProductId(ctx context.Context, productId string, body PatchProductsProductIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchProductsProductIdRequest(c.Server, productId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProducts(ctx context.Context, body GetProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostProductRequest calls the generic PostProduct builder with application/json body
func NewPostProductRequest(server string, body PostProductJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProductRequestWithBody(server, "application/json", bodyReader)
}

// NewPostProductRequestWithBody generates requests for PostProduct with any type of body
func NewPostProductRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProductRequest generates requests for GetProduct
func NewGetProductRequest(server string, productId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "productId", runtime.ParamLocationPath, productId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/product/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchProductsProductIdRequest calls the generic PatchProductsProductId builder with application/json body
func NewPatchProductsProductIdRequest(server string, productId string, body PatchProductsProductIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchProductsProductIdRequestWithBody(server, productId, "application/json", bodyReader)
}

// NewPatchProductsProductIdRequestWithBody generates requests for PatchProductsProductId with any type of body
func NewPatchProductsProductIdRequestWithBody(server string, productId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "productId", runtime.ParamLocationPath, productId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/product/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProductsRequest calls the generic GetProducts builder with application/json body
func NewGetProductsRequest(server string, body GetProductsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetProductsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetProductsRequestWithBody generates requests for GetProducts with any type of body
func NewGetProductsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostProductWithBodyWithResponse request with any body
	PostProductWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProductResponse, error)

	PostProductWithResponse(ctx context.Context, body PostProductJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProductResponse, error)

	// GetProductWithResponse request
	GetProductWithResponse(ctx context.Context, productId string, reqEditors ...RequestEditorFn) (*GetProductResponse, error)

	// PatchProductsProductIdWithBodyWithResponse request with any body
	PatchProductsProductIdWithBodyWithResponse(ctx context.Context, productId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchProductsProductIdResponse, error)

	PatchProductsProductIdWithResponse(ctx context.Context, productId string, body PatchProductsProductIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchProductsProductIdResponse, error)

	// GetProductsWithBodyWithResponse request with any body
	GetProductsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetProductsResponse, error)

	GetProductsWithResponse(ctx context.Context, body GetProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetProductsResponse, error)
}

type PostProductResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostProductResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProductResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CreatedOn   *openapi_types.Date `json:"createdOn,omitempty"`
		DeletedOn   *openapi_types.Date `json:"deletedOn,omitempty"`
		Description string              `json:"description"`
		Id          int                 `json:"id"`
		Name        string              `json:"name"`
		Price       int32               `json:"price"`
		Sku         string              `json:"sku"`
		UpdatedOn   *openapi_types.Date `json:"updatedOn,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetProductResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchProductsProductIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Product
}

// Status returns HTTPResponse.Status
func (r PatchProductsProductIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchProductsProductIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CreatedOn   *openapi_types.Date `json:"createdOn,omitempty"`
		DeletedOn   *openapi_types.Date `json:"deletedOn,omitempty"`
		Description string              `json:"description"`
		Id          int                 `json:"id"`
		Name        string              `json:"name"`
		Price       int32               `json:"price"`
		Sku         string              `json:"sku"`
		UpdatedOn   *openapi_types.Date `json:"updatedOn,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostProductWithBodyWithResponse request with arbitrary body returning *PostProductResponse
func (c *ClientWithResponses) PostProductWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProductResponse, error) {
	rsp, err := c.PostProductWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProductResponse(rsp)
}

func (c *ClientWithResponses) PostProductWithResponse(ctx context.Context, body PostProductJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProductResponse, error) {
	rsp, err := c.PostProduct(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProductResponse(rsp)
}

// GetProductWithResponse request returning *GetProductResponse
func (c *ClientWithResponses) GetProductWithResponse(ctx context.Context, productId string, reqEditors ...RequestEditorFn) (*GetProductResponse, error) {
	rsp, err := c.GetProduct(ctx, productId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductResponse(rsp)
}

// PatchProductsProductIdWithBodyWithResponse request with arbitrary body returning *PatchProductsProductIdResponse
func (c *ClientWithResponses) PatchProductsProductIdWithBodyWithResponse(ctx context.Context, productId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchProductsProductIdResponse, error) {
	rsp, err := c.PatchProductsProductIdWithBody(ctx, productId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchProductsProductIdResponse(rsp)
}

func (c *ClientWithResponses) PatchProductsProductIdWithResponse(ctx context.Context, productId string, body PatchProductsProductIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchProductsProductIdResponse, error) {
	rsp, err := c.PatchProductsProductId(ctx, productId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchProductsProductIdResponse(rsp)
}

// GetProductsWithBodyWithResponse request with arbitrary body returning *GetProductsResponse
func (c *ClientWithResponses) GetProductsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetProductsResponse, error) {
	rsp, err := c.GetProductsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductsResponse(rsp)
}

func (c *ClientWithResponses) GetProductsWithResponse(ctx context.Context, body GetProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetProductsResponse, error) {
	rsp, err := c.GetProducts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductsResponse(rsp)
}

// ParsePostProductResponse parses an HTTP response from a PostProductWithResponse call
func ParsePostProductResponse(rsp *http.Response) (*PostProductResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProductResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetProductResponse parses an HTTP response from a GetProductWithResponse call
func ParseGetProductResponse(rsp *http.Response) (*GetProductResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CreatedOn   *openapi_types.Date `json:"createdOn,omitempty"`
			DeletedOn   *openapi_types.Date `json:"deletedOn,omitempty"`
			Description string              `json:"description"`
			Id          int                 `json:"id"`
			Name        string              `json:"name"`
			Price       int32               `json:"price"`
			Sku         string              `json:"sku"`
			UpdatedOn   *openapi_types.Date `json:"updatedOn,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchProductsProductIdResponse parses an HTTP response from a PatchProductsProductIdWithResponse call
func ParsePatchProductsProductIdResponse(rsp *http.Response) (*PatchProductsProductIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchProductsProductIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Product
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetProductsResponse parses an HTTP response from a GetProductsWithResponse call
func ParseGetProductsResponse(rsp *http.Response) (*GetProductsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CreatedOn   *openapi_types.Date `json:"createdOn,omitempty"`
			DeletedOn   *openapi_types.Date `json:"deletedOn,omitempty"`
			Description string              `json:"description"`
			Id          int                 `json:"id"`
			Name        string              `json:"name"`
			Price       int32               `json:"price"`
			Sku         string              `json:"sku"`
			UpdatedOn   *openapi_types.Date `json:"updatedOn,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Add a product'
	// (POST /)
	PostProduct(ctx echo.Context) error
	// Retrieve a product information
	// (GET /product/{productId})
	GetProduct(ctx echo.Context, productId string) error
	// Update Product Information
	// (PATCH /product/{productId})
	PatchProductsProductId(ctx echo.Context, productId string) error
	// 商品一覧の取得
	// (GET /products)
	GetProducts(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostProduct converts echo context to params.
func (w *ServerInterfaceWrapper) PostProduct(ctx echo.Context) error {
	var err error
	// jsonにシリアライズされた引数
	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostProduct(ctx)
	return err
}

// GetProduct converts echo context to params.
func (w *ServerInterfaceWrapper) GetProduct(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "productId" -------------
	var productId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "productId", runtime.ParamLocationPath, ctx.Param("productId"), &productId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter productId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProduct(ctx, productId)
	return err
}

// PatchProductsProductId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchProductsProductId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "productId" -------------
	var productId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "productId", runtime.ParamLocationPath, ctx.Param("productId"), &productId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter productId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchProductsProductId(ctx, productId)
	return err
}

// GetProducts converts echo context to params.
func (w *ServerInterfaceWrapper) GetProducts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProducts(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/", wrapper.PostProduct)
	router.GET(baseURL+"/product/:productId", wrapper.GetProduct)
	router.PATCH(baseURL+"/product/:productId", wrapper.PatchProductsProductId)
	router.GET(baseURL+"/products", wrapper.GetProducts)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"3Pcjdw8kyQ8BAAD//7vO7qHrEwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
